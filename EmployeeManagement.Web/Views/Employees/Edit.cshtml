@model EmployeeManagement.Services.DTOs.EmployeeDto

@{
    ViewBag.Title = "Update Employee";
}
<!-- Breadcrumbs-->
<ol class="breadcrumb">
    <li class="breadcrumb-item">
        <a href="@Url.Action("Index","Employees")">Employees</a>
    </li>
    <li class="breadcrumb-item active">Update Employee</li>
</ol>
<!-- Page Content -->
<h1>@ViewBag.Title</h1>
<hr>
<div class="card mb-3 col-md-8 m-auto">
    <div class="card-header">

        <i class="fas fa-user"></i>
        Update Employee
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Edit", "Employees", new { id = Model.Id }, FormMethod.Post))
        {
                        @Html.AntiForgeryToken()
                        <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.Country, (SelectList)ViewBag.Countries, "Country ...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.City, Enumerable.Empty<SelectListItem>(), "City ...", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-4 m-auto">
                        <input type="submit" value="Update" class="btn btn-success" />
                        <a href="@Url.Action("Index","Employees")" class="btn  btn-primary">Back to List</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(document).ready(function () {

        document.getElementById("Country").onchange = function () {
            FillCities(document.getElementById("Country").value);
        };
        FillCities(document.getElementById("Country").value);
    });

    function FillCities(Id) {
        var currentCity = "@ViewBag.selectedCity";
        $('#City').find('option').remove().end().append('<option value="">City...</option>').val("")
        if (Id == "") {
            return 0;
        };
        $.ajax({
            type: "get",
            url: "@Url.Action("GetCities", "Cities",new { Area = ""})",
            data: { CountryId: Id },
            ajaxasync: true,
            success: function (response) {
                if (response.success == true) {
                    if (typeof response.cities !== "undefined") {

                        $.each(response.cities, function (Key, Value) {
                            $('#City').append('<option value="' + Value.Id + '">' + Value.Name + '</option>');//option can be created manually or loaded using Ajax
                        });
                        $('#City').val("");
                    }
                    if (currentCity !== "")
                        $('#City').val("@ViewBag.selectedCity");
                }
                else if (response.success == false) {
                    swal(response.responseText);
                }
                else {
                    swal("unrecognized response when try retrieve Cities");
                }
            },
            error: function (response) {
                swal("fail when try retrieve Cities");
            },
        });
    }
    </script>

}
